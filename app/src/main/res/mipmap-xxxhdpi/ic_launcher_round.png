package com.seuic.property.assessment.ui;

import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.View;
import android.widget.LinearLayout;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.blankj.utilcode.constant.PermissionConstants;
import com.blankj.utilcode.util.ConvertUtils;
import com.blankj.utilcode.util.PermissionUtils;
import com.blankj.utilcode.util.ThreadUtils;
import com.blankj.utilcode.util.TimeUtils;
import com.blankj.utilcode.util.ToastUtils;
import com.chad.library.adapter.base.BaseQuickAdapter;
import com.chad.library.adapter.base.BaseViewHolder;
import com.github.clans.fab.FloatingActionMenu;
import com.google.android.material.tabs.TabLayout;
import com.kongzue.dialog.v3.WaitDialog;
import com.seuic.property.assessment.R;
import com.seuic.property.assessment.constant.Constants;
import com.seuic.property.assessment.db.PropertyDB;
import com.seuic.property.assessment.util.ExcelUtil;

import org.litepal.LitePal;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/**
 * <pre>
 *     author: Bruce Yang
 *     blog  : https://yangjianan.gitee.io
 *     time  : 2019/11/6
 *     desc  : 资产盘点页面
 * </pre>
 */
public class CheckPropertyActivity extends AppCompatActivity {
    private static final String TAG = CheckPropertyActivity.class.getSimpleName();

    private Context mContext;

    private FloatingActionMenu floatingActionMenu;
    private RecyclerView propertyOkRV;
    private RecyclerView propertyWaitRV;
    private TextView msgTV;
    //接收excel数据
    private List<Map<Integer, Object>> readExcelList = new ArrayList<>();
    private List<Map<Integer, Object>> dbListOK = new ArrayList<>();
    private List<Map<Integer, Object>> dbListWait = new ArrayList<>();
    private CheckPropertyAdapter checkPropertyOkAdapter;
    private CheckPropertyAdapter checkPropertyWaitAdapter;

    private int FILE_SELECTOR_CODE = 10000;
    private int DIR_SELECTOR_CODE = 20000;

    private ScanReceiver scanReceiver;

    @Override
    public boolean onSupportNavigateUp() {
        onBackPressed();
        return super.onSupportNavigateUp();
    }

    @Override
    public void onBackPressed() {
        if (floatingActionMenu.isOpened()) {
            floatingActionMenu.close(true);
        }

        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle(getString(R.string.attention));
        builder.setMessage(getString(R.string.dialog_msg));
        builder.setPositiveButton(getString(R.string.sure), (dialog, which) -> {
            //先清除数据库
            LitePal.deleteAll(PropertyDB.class);
            Log.i(TAG, "onClick: 确定");
            finish();
        });
        builder.setNegativeButton(getString(R.string.cancel), (dialog, which) -> Log.i(TAG, "onClick: 取消"));
        builder.show();
    }

    @Override
    public void onDestroy() {
        try {
            if (scanReceiver != null) {
                unregisterReceiver(scanReceiver);
                scanReceiver = null;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        super.onDestroy();
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_check_property);
        mContext = this;
        initToolbar();
        initViews();
        initBarcodeReceiver();
    }

    private void initToolbar() {
        Objects.requireNonNull(getSupportActionBar()).setDisplayHomeAsUpEnabled(true);
        Objects.requireNonNull(getSupportActionBar()).setTitle(getString(R.string.check_property_title));
    }

    private void initViews() {
        floatingActionMenu = findViewById(R.id.float_menu);
        floatingActionMenu.setClosedOnTouchOutside(true);
        //自动展开
        floatingActionMenu.postDelayed(() -> {
            if (!floatingActionMenu.isOpened()) {
                floatingActionMenu.open(true);
            }
        }, 100);

        initTab();

        msgTV = findViewById(R.id.msg_tv);

        propertyOkRV = findViewById(R.id.property_ok_rv);
        propertyOkRV.setLayoutManager(new LinearLayoutManager(this));
        //propertyOkRV.addItemDecoration(new DividerGridItemDecoration(this));
        propertyOkRV.setNestedScrollingEnabled(false); // 解决 ScrollView 嵌套 RecyclerView 导致滑动不流畅的问题
        checkPropertyOkAdapter = new CheckPropertyAdapter(dbListOK);
        propertyOkRV.setAdapter(checkPropertyOkAdapter);

        propertyWaitRV = findViewById(R.id.property_wait_rv);
        propertyWaitRV.setLayoutManager(new LinearLayoutManager(this));
        //propertyWaitRV.addItemDecoration(new DividerGridItemDecoration(this));
        propertyWaitRV.setNestedScrollingEnabled(false); // 解决 ScrollView 嵌套 RecyclerView 导致滑动不流畅的问题
        checkPropertyWaitAdapter = new CheckPropertyAdapter(dbListWait);
        propertyWaitRV.setAdapter(checkPropertyWaitAdapter);
    }

    private void initTab() {
        TabLayout tab = findViewById(R.id.tab);
        String[] mTitles = {Constants.已盘点, Constants.未盘点};
        for (String mTitle : mTitles) {
            tab.addTab(tab.newTab().setText(mTitle));
        }
        tab.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {
            @Override
            public void onTabSelected(TabLayout.Tab tab) {
                CharSequence tabText = tab.getText();
                Log.i(TAG, "onTabSelected: " + tabText);
                if (tabText != null) {
                    if (tabText.equals(Constants.已盘点)) {
                        propertyOkRV.setVisibility(View.VISIBLE);
                        propertyWaitRV.setVisibility(View.GONE);
                    } else if (tabText.equals(Constants.未盘点)) {
                        propertyOkRV.setVisibility(View.GONE);
                        propertyWaitRV.setVisibility(View.VISIBLE);
                    }
                }
            }

            @Override
            public void onTabUnselected(TabLayout.Tab tab) {

            }

            @Override
            public void onTabReselected(TabLayout.Tab tab) {

            }
        });
    }

    /**
     * 初始化东集扫描工具广播
     */
    private void initBarcodeReceiver() {
        //配置东集扫描工具
        Intent intent = new Intent(Constants.ACTION_SCANNERTOOL_SETTING);
        intent.putExtra(Constants.TYPE_BARCODE_BROADCAST_ACTION, Constants.SCAN_ACTION);
        intent.putExtra(Constants.TYPE_BARCODE_BROADCAST_KEY, Constants.SCAN_KEY);
        //条码发送方式，指定广播方式（FOCUS，BROADCAST，EMUKEY，CLIPBOARD）
        intent.putExtra(Constants.TYPE_BARCODE_SEND_MODE, "BROADCAST");
        intent.putExtra(Constants.TYPE_BOOT_START, true);
        sendBroadcast(intent);

        if (scanReceiver == null) {
            scanReceiver = new ScanReceiver();
            IntentFilter scanFilter = new IntentFilter(Constants.SCAN_ACTION);
            registerReceiver(scanReceiver, scanFilter);
        }
    }

    public void onClick(View view) {
        if (floatingActionMenu.isOpened()) {
            floatingActionMenu.close(true);
        }
        switch (view.getId()) {
            case R.id.add_excel_file_btn:

                PermissionUtils.permission(PermissionConstants.STORAGE)
                        .callback(new PermissionUtils.SimpleCallback() {
                            @Override
                            public void onGranted() {
                                openFileSelector();
                            }

                            @Override
                            public void onDenied() {
                                ToastUtils.showShort("权限不足！");
                            }
                        })
                        .request();
                break;
            case R.id.export_excel_file_btn:
                PermissionUtils.permission(PermissionConstants.STORAGE)
                        .callback(new PermissionUtils.SimpleCallback() {
                            @Override
                            public void onGranted() {
                                if (dbListWait.size()  > 1) {
                                    AlertDialog.Builder builder = new AlertDialog.Builder(mContext);
                                    builder.setTitle(getString(R.string.attention));
                                    builder.setMessage(getString(R.string.export_msg));
                                    builder.setPositiveButton(getString(R.string.sure), (dialog, which) -> {
                                        Log.i(TAG, "onClick: 确定");
                                        //选择文件夹，然后导出
                                        openFolderSelector();
                                    });
                                    builder.setNegativeButton(getString(R.string.cancel), (dialog, which) -> Log.i(TAG, "onClick: 取消"));
                                    builder.show();
                                } else {
                                    if (readExcelList.size() > 0) {
                                        //选择文件夹，然后导出
                                        openFolderSelector();
                                    } else {
                                        ToastUtils.showShort("请先导入EXCEL");
                                    }
                                }
                            }

                            @Override
                            public void onDenied() {
                                ToastUtils.showShort("权限不足！");
                            }
                        })
                        .request();
                break;
            default:
                break;
        }
    }

    /**
     * 刷新Excel，已盘点，未盘点
     */
    private void updateUI() {
        runOnUiThread(() -> {
            msgTV.setVisibility(View.GONE);
            if (readExcelList != null && readExcelList.size() > 0) {
                Map<Integer, Object> header = readExcelList.get(0);
                //已盘点
                dbListOK.clear();
                dbListOK.add(header);
                //未盘点
                dbListWait.clear();
                dbListWait.add(header);

                //盘点状态字段的列下标
                int indexOfStatus = header.size() - 1;

                if (readExcelList.size() >= 2) {
                    for (int i = 1; i < readExcelList.size(); i++) {
                        Map<Integer, Object> item = readExcelList.get(i);
                        if (item.containsKey(indexOfStatus)) {
                            Object status = item.get(indexOfStatus);
                            if (status.equals(Constants.已盘点)) {
                                dbListOK.add(item);
                            } else if (status.equals(Constants.未盘点)) {
                                dbListWait.add(item);
                            }
                        }
                    }
                }
                //已盘点
                checkPropertyOkAdapter.notifyDataSetChanged();
                //未盘点
                checkPropertyWaitAdapter.notifyDataSetChanged();
            }
        });
    }

    /**
     * 打开本地文件器选择文件
     */
    private void openFileSelector() {
        Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
        intent.setType("application/*");//设置类型，我这里是任意类型，任意后缀的可以这样写。
        //并没有用。
        intent.putExtra(Intent.EXTRA_MIME_TYPES, "application/vnd.ms-excel");
        intent.putExtra(Intent.EXTRA_MIME_TYPES, "application/*");
        intent.putExtra(Intent.EXTRA_MIME_TYPES, "text/*");
        startActivityForResult(intent, FILE_SELECTOR_CODE);
    }

    /**
     * 打开本地文件器选择文件夹
     */
    private void openFolderSelector() {
        Intent intent = new Intent(Intent.ACTION_CREATE_DOCUMENT);
        intent.setType("application/*");//设置类型，我这里是任意类型，任意后缀的可以这样写。
//        intent.putExtra(Intent.EXTRA_TITLE, "export.xlsx");
        intent.putExtra(Intent.EXTRA_TITLE,
                TimeUtils.getNowString() + ".xlsx");
        startActivityForResult(intent, DIR_SELECTOR_CODE);
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == FILE_SELECTOR_CODE && resultCode == Activity.RESULT_OK) {
            Uri uri = data.getData();
            if (uri == null) return;
            Log.i(TAG, "onActivityResult: " + "文件路径：" + uri.getPath());
            //选择文件，然后导入
            importExcelDeal(uri);
        } else if (requestCode == DIR_SELECTOR_CODE && resultCode == Activity.RESULT_OK) {
            Uri uri = data.getData();
            if (uri == null) return;
            Log.i(TAG, "onActivityResult: " + "文件路径：" + uri.getPath());
            WaitDialog.show((AppCompatActivity) mContext, "正在导出...");
            ExcelUtil.writeExcelNew(this, readExcelList,  uri);
            new Handler().postDelayed(() -> runOnUiThread(WaitDialog::dismiss), 1000);
        }
    }

    private void importExcelDeal(final Uri uri) {
        ThreadUtils.executeBySingle(new ThreadUtils.Task<Object>() {
            @Override
            public Object doInBackground() {
                WaitDialog.show((AppCompatActivity) mContext, "正在导入...");

                List<Map<Integer, Object>> readExcelNew = ExcelUtil.readExcelNew(mContext, uri, uri.getPath());

                Log.i(TAG, "onActivityResult:readExcelNew " + ((readExcelNew != null) ? readExcelNew.size() : ""));
                WaitDialog.dismiss();

                if (readExcelNew != null && readExcelNew.size() > 0) {
                    readExcelList.clear();
                    readExcelList.addAll(readExcelNew);
                    updateUI();

                    Toa